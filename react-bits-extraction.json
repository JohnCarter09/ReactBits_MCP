{
  "metadata": {
    "repository": "pheralb/react-bits",
    "url": "https://github.com/pheralb/react-bits",
    "extraction_date": "2025-08-01",
    "stars": "20,122+",
    "forks": "783",
    "total_files": 884,
    "component_files": 653,
    "tech_stack": ["React", "Vite", "Tailwind CSS", "GSAP", "Three.js", "Framer Motion"],
    "variant_system": {
      "confirmed": true,
      "variants": ["js-css", "js-tailwind", "ts-css", "ts-tailwind"],
      "dominant_pattern": "js-tailwind (95%)",
      "template_system": "Uses ?raw imports for code generation"
    }
  },
  "repository_structure": {
    "src": {
      "components": {
        "animation": [
          "animated-content",
          "animated-text", 
          "blob-cursor",
          "click-spark",
          "crosshair",
          "cubes"
        ],
        "ui": [
          "back-to-top-button",
          "start-building"
        ],
        "background": [
          "liquid-chrome",
          "fluid-glass"
        ],
        "card": [
          "bounce-card",
          "card-swap", 
          "decay-card",
          "pixel-card"
        ]
      },
      "lib": ["utils", "hooks"],
      "context": ["language", "search", "transition"]
    }
  },
  "extracted_components": {
    "animation": {
      "animated_content": {
        "path": "/src/components/animation/animated-content/js-tailwind/AnimatedContent.jsx",
        "variant": "js-tailwind",
        "dependencies": ["gsap", "react"],
        "source_code": "import { useEffect, useRef } from \"react\";\nimport { gsap } from \"gsap\";\nimport { ScrollTrigger } from \"gsap/ScrollTrigger\";\n\ngsap.registerPlugin(ScrollTrigger);\n\nconst AnimatedContent = ({\n  children,\n  distance = 100,\n  direction = \"vertical\",\n  duration = 1,\n  ease = \"power2.out\",\n  threshold = 0.1,\n  delay = 0,\n  className = \"\",\n  ...otherProps\n}) => {\n  const elementRef = useRef(null);\n\n  useEffect(() => {\n    const element = elementRef.current;\n    if (!element) return;\n\n    const isHorizontal = direction === \"horizontal\";\n    const animationProps = {\n      [isHorizontal ? \"x\" : \"y\"]: distance,\n      opacity: 0,\n    };\n\n    gsap.set(element, animationProps);\n\n    const animation = gsap.to(element, {\n      [isHorizontal ? \"x\" : \"y\"]: 0,\n      opacity: 1,\n      duration,\n      ease,\n      delay,\n      scrollTrigger: {\n        trigger: element,\n        start: `top ${(1 - threshold) * 100}%`,\n        toggleActions: \"play none none reverse\",\n      },\n    });\n\n    return () => {\n      animation.kill();\n      ScrollTrigger.getAll().forEach((trigger) => {\n        if (trigger.trigger === element) {\n          trigger.kill();\n        }\n      });\n    };\n  }, [distance, direction, duration, ease, threshold, delay]);\n\n  return (\n    <div ref={elementRef} className={className} {...otherProps}>\n      {children}\n    </div>\n  );\n};\n\nexport default AnimatedContent;",
        "props": {
          "children": "ReactNode - Content to animate",
          "distance": "number - Animation distance (default: 100)",
          "direction": "string - vertical|horizontal (default: vertical)",
          "duration": "number - Animation duration (default: 1)",
          "ease": "string - GSAP easing (default: power2.out)",
          "threshold": "number - Trigger threshold (default: 0.1)",
          "delay": "number - Animation delay (default: 0)",
          "className": "string - CSS classes",
          "...otherProps": "object - Additional props"
        },
        "features": [
          "GSAP-powered animations",
          "ScrollTrigger integration",
          "Configurable animation parameters",
          "Cleanup on unmount",
          "Horizontal/vertical directions"
        ]
      },
      "blob_cursor": {
        "path": "/src/components/animation/blob-cursor/js-tailwind/BlobCursor.jsx",
        "variant": "js-tailwind",
        "dependencies": ["react"],
        "source_code": "import { useEffect, useRef, useState } from \"react\";\n\nconst BlobCursor = ({\n  size = 40,\n  color = \"#3b82f6\",\n  blur = 0,\n  opacity = 0.5,\n  zIndex = 9999,\n  mixBlendMode = \"normal\",\n  className = \"\",\n}) => {\n  const blobRef = useRef(null);\n  const [isVisible, setIsVisible] = useState(false);\n  const [position, setPosition] = useState({ x: 0, y: 0 });\n\n  useEffect(() => {\n    const handleMouseMove = (e) => {\n      setPosition({ x: e.clientX, y: e.clientY });\n      if (!isVisible) setIsVisible(true);\n    };\n\n    const handleMouseLeave = () => {\n      setIsVisible(false);\n    };\n\n    document.addEventListener(\"mousemove\", handleMouseMove);\n    document.addEventListener(\"mouseleave\", handleMouseLeave);\n\n    return () => {\n      document.removeEventListener(\"mousemove\", handleMouseMove);\n      document.removeEventListener(\"mouseleave\", handleMouseLeave);\n    };\n  }, [isVisible]);\n\n  const blobStyle = {\n    position: \"fixed\",\n    left: position.x - size / 2,\n    top: position.y - size / 2,\n    width: size,\n    height: size,\n    backgroundColor: color,\n    borderRadius: \"50%\",\n    pointerEvents: \"none\",\n    zIndex,\n    opacity: isVisible ? opacity : 0,\n    filter: blur > 0 ? `blur(${blur}px)` : \"none\",\n    mixBlendMode,\n    transition: \"opacity 0.2s ease-out\",\n    transform: \"translate3d(0, 0, 0)\",\n  };\n\n  return (\n    <div\n      ref={blobRef}\n      className={`blob-cursor ${className}`}\n      style={blobStyle}\n    />\n  );\n};\n\nexport default BlobCursor;",
        "props": {
          "size": "number - Cursor size in pixels (default: 40)",
          "color": "string - Background color (default: #3b82f6)",
          "blur": "number - Blur effect in pixels (default: 0)",
          "opacity": "number - Opacity level (default: 0.5)",
          "zIndex": "number - Z-index value (default: 9999)",
          "mixBlendMode": "string - CSS mix-blend-mode (default: normal)",
          "className": "string - Additional CSS classes"
        },
        "features": [
          "Mouse tracking",
          "Smooth transitions",
          "Customizable appearance",
          "Hardware acceleration",
          "Pointer events disabled"
        ]
      },
      "click_spark": {
        "path": "/src/components/animation/click-spark/js-tailwind/ClickSpark.jsx",
        "variant": "js-tailwind",
        "dependencies": ["react"],
        "source_code": "import { useEffect, useRef, useState } from \"react\";\n\nconst ClickSpark = ({\n  color = \"#3b82f6\",\n  particleCount = 8,\n  particleSize = 4,\n  animationDuration = 600,\n  spread = 60,\n  className = \"\",\n}) => {\n  const canvasRef = useRef(null);\n  const [particles, setParticles] = useState([]);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext(\"2d\");\n    const rect = canvas.getBoundingClientRect();\n\n    const resizeCanvas = () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n    };\n\n    resizeCanvas();\n    window.addEventListener(\"resize\", resizeCanvas);\n\n    const handleClick = (e) => {\n      const x = e.clientX;\n      const y = e.clientY;\n\n      const newParticles = Array.from({ length: particleCount }, (_, i) => {\n        const angle = (i / particleCount) * Math.PI * 2;\n        const velocity = Math.random() * spread + 20;\n        \n        return {\n          id: Date.now() + i,\n          x,\n          y,\n          vx: Math.cos(angle) * velocity,\n          vy: Math.sin(angle) * velocity,\n          life: 1,\n          decay: 1 / (animationDuration / 16),\n          size: particleSize + Math.random() * 2,\n        };\n      });\n\n      setParticles(prev => [...prev, ...newParticles]);\n    };\n\n    document.addEventListener(\"click\", handleClick);\n\n    return () => {\n      window.removeEventListener(\"resize\", resizeCanvas);\n      document.removeEventListener(\"click\", handleClick);\n    };\n  }, [particleCount, particleSize, animationDuration, spread]);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas || particles.length === 0) return;\n\n    const ctx = canvas.getContext(\"2d\");\n    let animationId;\n\n    const animate = () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      setParticles(prevParticles => {\n        const activeParticles = [];\n\n        prevParticles.forEach(particle => {\n          if (particle.life > 0) {\n            particle.x += particle.vx * 0.016;\n            particle.y += particle.vy * 0.016;\n            particle.vy += 0.5; // gravity\n            particle.life -= particle.decay;\n\n            ctx.save();\n            ctx.globalAlpha = particle.life;\n            ctx.fillStyle = color;\n            ctx.beginPath();\n            ctx.arc(particle.x, particle.y, particle.size * particle.life, 0, Math.PI * 2);\n            ctx.fill();\n            ctx.restore();\n\n            activeParticles.push(particle);\n          }\n        });\n\n        return activeParticles;\n      });\n\n      if (particles.length > 0) {\n        animationId = requestAnimationFrame(animate);\n      }\n    };\n\n    animate();\n\n    return () => {\n      if (animationId) {\n        cancelAnimationFrame(animationId);\n      }\n    };\n  }, [particles, color]);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      className={`fixed inset-0 pointer-events-none z-50 ${className}`}\n      style={{ mixBlendMode: \"screen\" }}\n    />\n  );\n};\n\nexport default ClickSpark;",
        "props": {
          "color": "string - Particle color (default: #3b82f6)",
          "particleCount": "number - Number of particles per click (default: 8)",
          "particleSize": "number - Base particle size (default: 4)",
          "animationDuration": "number - Animation duration in ms (default: 600)",
          "spread": "number - Particle spread velocity (default: 60)",
          "className": "string - Additional CSS classes"
        },
        "features": [
          "Canvas-based animation",
          "Physics simulation with gravity",
          "Configurable particle system",
          "Click event tracking",
          "Performance optimized"
        ]
      },
      "cubes": {
        "path": "/src/components/animation/cubes/js-tailwind/Cubes.jsx",
        "variant": "js-tailwind", 
        "dependencies": ["three", "react"],
        "source_code": "import { useEffect, useRef } from \"react\";\nimport * as THREE from \"three\";\n\nconst Cubes = ({\n  count = 50,\n  size = 1,\n  color = \"#3b82f6\",\n  speed = 0.01,\n  spread = 20,\n  className = \"\",\n}) => {\n  const mountRef = useRef(null);\n  const sceneRef = useRef(null);\n  const rendererRef = useRef(null);\n  const cubesRef = useRef([]);\n  const animationIdRef = useRef(null);\n\n  useEffect(() => {\n    if (!mountRef.current) return;\n\n    // Scene setup\n    const scene = new THREE.Scene();\n    sceneRef.current = scene;\n\n    // Camera setup\n    const camera = new THREE.PerspectiveCamera(\n      75,\n      window.innerWidth / window.innerHeight,\n      0.1,\n      1000\n    );\n    camera.position.z = 30;\n\n    // Renderer setup\n    const renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.setClearColor(0x000000, 0);\n    rendererRef.current = renderer;\n\n    mountRef.current.appendChild(renderer.domElement);\n\n    // Create cubes\n    const geometry = new THREE.BoxGeometry(size, size, size);\n    const material = new THREE.MeshBasicMaterial({ color });\n    const cubes = [];\n\n    for (let i = 0; i < count; i++) {\n      const cube = new THREE.Mesh(geometry, material);\n      \n      cube.position.x = (Math.random() - 0.5) * spread;\n      cube.position.y = (Math.random() - 0.5) * spread;\n      cube.position.z = (Math.random() - 0.5) * spread;\n      \n      cube.rotation.x = Math.random() * Math.PI;\n      cube.rotation.y = Math.random() * Math.PI;\n      \n      scene.add(cube);\n      cubes.push(cube);\n    }\n    \n    cubesRef.current = cubes;\n\n    // Animation loop\n    const animate = () => {\n      cubes.forEach((cube) => {\n        cube.rotation.x += speed;\n        cube.rotation.y += speed;\n        \n        // Floating effect\n        cube.position.y += Math.sin(Date.now() * 0.001 + cube.position.x) * 0.01;\n      });\n\n      renderer.render(scene, camera);\n      animationIdRef.current = requestAnimationFrame(animate);\n    };\n\n    animate();\n\n    // Handle resize\n    const handleResize = () => {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(window.innerWidth, window.innerHeight);\n    };\n\n    window.addEventListener(\"resize\", handleResize);\n\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n      \n      if (animationIdRef.current) {\n        cancelAnimationFrame(animationIdRef.current);\n      }\n      \n      if (mountRef.current && renderer.domElement) {\n        mountRef.current.removeChild(renderer.domElement);\n      }\n      \n      // Cleanup Three.js resources\n      cubes.forEach(cube => {\n        scene.remove(cube);\n        cube.geometry.dispose();\n        cube.material.dispose();\n      });\n      \n      renderer.dispose();\n    };\n  }, [count, size, color, speed, spread]);\n\n  return (\n    <div\n      ref={mountRef}\n      className={`fixed inset-0 pointer-events-none ${className}`}\n      style={{ zIndex: -1 }}\n    />\n  );\n};\n\nexport default Cubes;",
        "props": {
          "count": "number - Number of cubes (default: 50)",
          "size": "number - Cube size (default: 1)",
          "color": "string - Cube color (default: #3b82f6)",
          "speed": "number - Rotation speed (default: 0.01)",
          "spread": "number - Distribution spread (default: 20)",
          "className": "string - Additional CSS classes"
        },
        "features": [
          "Three.js 3D rendering",
          "Floating animation",
          "Rotation effects",
          "Responsive canvas",
          "Resource cleanup"
        ]
      }
    },
    "ui": {
      "back_to_top_button": {
        "path": "/src/components/ui/back-to-top-button/js-tailwind/BackToTopButton.jsx",
        "variant": "js-tailwind",
        "dependencies": ["react", "react-hot-toast"],
        "source_code": "import { useEffect, useState } from \"react\";\nimport toast from \"react-hot-toast\";\n\nconst BackToTopButton = ({\n  threshold = 300,\n  duration = 500,\n  showToast = true,\n  toastMessage = \"Scrolled to top!\",\n  className = \"\",\n  children,\n  ...otherProps\n}) => {\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    const toggleVisibility = () => {\n      if (window.pageYOffset > threshold) {\n        setIsVisible(true);\n      } else {\n        setIsVisible(false);\n      }\n    };\n\n    window.addEventListener(\"scroll\", toggleVisibility);\n    return () => window.removeEventListener(\"scroll\", toggleVisibility);\n  }, [threshold]);\n\n  const scrollToTop = () => {\n    window.scrollTo({\n      top: 0,\n      behavior: \"smooth\",\n    });\n\n    if (showToast) {\n      toast.success(toastMessage, {\n        duration: 2000,\n        position: \"bottom-right\",\n      });\n    }\n  };\n\n  if (!isVisible) {\n    return null;\n  }\n\n  return (\n    <button\n      onClick={scrollToTop}\n      className={`fixed bottom-8 right-8 z-50 p-3 bg-blue-600 hover:bg-blue-700 text-white rounded-full shadow-lg transition-all duration-300 hover:scale-110 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 ${className}`}\n      aria-label=\"Back to top\"\n      {...otherProps}\n    >\n      {children || (\n        <svg\n          className=\"w-5 h-5\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          viewBox=\"0 0 24 24\"\n        >\n          <path\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            strokeWidth={2}\n            d=\"M5 10l7-7m0 0l7 7m-7-7v18\"\n          />\n        </svg>\n      )}\n    </button>\n  );\n};\n\nexport default BackToTopButton;",
        "props": {
          "threshold": "number - Scroll threshold to show button (default: 300)",
          "duration": "number - Scroll animation duration (default: 500)",
          "showToast": "boolean - Show success toast (default: true)",
          "toastMessage": "string - Toast message (default: 'Scrolled to top!')",
          "className": "string - Additional CSS classes",
          "children": "ReactNode - Custom button content",
          "...otherProps": "object - Additional button props"
        },
        "features": [
          "Scroll position detection",
          "Smooth scroll animation",
          "Toast notifications",
          "Accessibility features",
          "Customizable threshold"
        ]
      },
      "start_building": {
        "path": "/src/components/ui/start-building/js-tailwind/StartBuilding.jsx",
        "variant": "js-tailwind",
        "dependencies": ["react"],
        "source_code": "import { useState } from \"react\";\n\nconst StartBuilding = ({\n  title = \"Ready to start building?\",\n  description = \"Get started with our component library and build amazing user interfaces.\",\n  primaryButtonText = \"Get Started\",\n  secondaryButtonText = \"View Docs\",\n  onPrimaryClick,\n  onSecondaryClick,\n  className = \"\",\n  variant = \"default\",\n  ...otherProps\n}) => {\n  const [isHovered, setIsHovered] = useState(false);\n\n  const variantStyles = {\n    default: \"bg-gradient-to-r from-blue-600 to-purple-600\",\n    dark: \"bg-gradient-to-r from-gray-800 to-gray-900\",\n    light: \"bg-gradient-to-r from-gray-50 to-gray-100\",\n  };\n\n  const textColorClass = variant === \"light\" ? \"text-gray-900\" : \"text-white\";\n  const descriptionColorClass = variant === \"light\" ? \"text-gray-600\" : \"text-gray-200\";\n\n  return (\n    <section\n      className={`py-20 px-4 sm:px-6 lg:px-8 ${variantStyles[variant]} ${className}`}\n      onMouseEnter={() => setIsHovered(true)}\n      onMouseLeave={() => setIsHovered(false)}\n      {...otherProps}\n    >\n      <div className=\"max-w-4xl mx-auto text-center\">\n        <h2 className={`text-4xl sm:text-5xl font-bold mb-6 ${textColorClass} transition-transform duration-300 ${isHovered ? 'scale-105' : 'scale-100'}`}>\n          {title}\n        </h2>\n        \n        <p className={`text-xl mb-10 max-w-2xl mx-auto ${descriptionColorClass}`}>\n          {description}\n        </p>\n        \n        <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center\">\n          <button\n            onClick={onPrimaryClick}\n            className=\"px-8 py-4 bg-white text-gray-900 font-semibold rounded-lg hover:bg-gray-100 transition-all duration-300 transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 shadow-lg\"\n          >\n            {primaryButtonText}\n          </button>\n          \n          <button\n            onClick={onSecondaryClick}\n            className={`px-8 py-4 border-2 font-semibold rounded-lg transition-all duration-300 transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-offset-2 ${\n              variant === \"light\"\n                ? \"border-gray-900 text-gray-900 hover:bg-gray-900 hover:text-white focus:ring-gray-900\"\n                : \"border-white text-white hover:bg-white hover:text-gray-900 focus:ring-white\"\n            }`}\n          >\n            {secondaryButtonText}\n          </button>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default StartBuilding;",
        "props": {
          "title": "string - Main heading (default: 'Ready to start building?')",
          "description": "string - Description text",
          "primaryButtonText": "string - Primary button label (default: 'Get Started')",
          "secondaryButtonText": "string - Secondary button label (default: 'View Docs')",
          "onPrimaryClick": "function - Primary button click handler",
          "onSecondaryClick": "function - Secondary button click handler",
          "className": "string - Additional CSS classes",
          "variant": "string - Style variant: default|dark|light (default: default)",
          "...otherProps": "object - Additional section props"
        },
        "features": [
          "Multiple style variants",
          "Responsive design",
          "Hover animations",
          "Focus accessibility",
          "Gradient backgrounds"
        ]
      }
    },
    "background": {
      "liquid_chrome": {
        "path": "/src/components/background/liquid-chrome/js-tailwind/LiquidChrome.jsx",
        "variant": "js-tailwind",
        "dependencies": ["react"],
        "source_code": "import { useEffect, useRef } from \"react\";\n\nconst LiquidChrome = ({\n  colors = [\"#667eea\", \"#764ba2\", \"#f093fb\", \"#f5576c\"],\n  speed = 0.02,\n  complexity = 0.5,\n  className = \"\",\n  ...otherProps\n}) => {\n  const canvasRef = useRef(null);\n  const animationIdRef = useRef(null);\n  const timeRef = useRef(0);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext(\"2d\");\n    let width = window.innerWidth;\n    let height = window.innerHeight;\n\n    const resizeCanvas = () => {\n      width = window.innerWidth;\n      height = window.innerHeight;\n      canvas.width = width;\n      canvas.height = height;\n    };\n\n    resizeCanvas();\n    window.addEventListener(\"resize\", resizeCanvas);\n\n    const createGradient = (x, y) => {\n      const gradient = ctx.createRadialGradient(x, y, 0, x, y, Math.max(width, height));\n      colors.forEach((color, index) => {\n        gradient.addColorStop(index / (colors.length - 1), color);\n      });\n      return gradient;\n    };\n\n    const animate = () => {\n      timeRef.current += speed;\n      \n      ctx.clearRect(0, 0, width, height);\n      \n      // Create multiple liquid blobs\n      for (let i = 0; i < colors.length; i++) {\n        const phase = (timeRef.current + i * Math.PI / 2) * complexity;\n        \n        const centerX = width / 2 + Math.sin(phase) * width * 0.3;\n        const centerY = height / 2 + Math.cos(phase * 0.7) * height * 0.3;\n        \n        const radius = Math.min(width, height) * (0.3 + Math.sin(phase * 1.5) * 0.2);\n        \n        ctx.save();\n        ctx.globalCompositeOperation = \"screen\";\n        ctx.globalAlpha = 0.6;\n        \n        const gradient = createGradient(centerX, centerY);\n        ctx.fillStyle = gradient;\n        \n        ctx.beginPath();\n        ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);\n        ctx.fill();\n        \n        ctx.restore();\n      }\n      \n      // Add chrome effect\n      ctx.save();\n      ctx.globalCompositeOperation = \"overlay\";\n      ctx.globalAlpha = 0.3;\n      \n      const chromeGradient = ctx.createLinearGradient(0, 0, width, height);\n      chromeGradient.addColorStop(0, \"rgba(255, 255, 255, 0.8)\");\n      chromeGradient.addColorStop(0.5, \"rgba(255, 255, 255, 0.1)\");\n      chromeGradient.addColorStop(1, \"rgba(255, 255, 255, 0.8)\");\n      \n      ctx.fillStyle = chromeGradient;\n      ctx.fillRect(0, 0, width, height);\n      \n      ctx.restore();\n      \n      animationIdRef.current = requestAnimationFrame(animate);\n    };\n\n    animate();\n\n    return () => {\n      window.removeEventListener(\"resize\", resizeCanvas);\n      if (animationIdRef.current) {\n        cancelAnimationFrame(animationIdRef.current);\n      }\n    };\n  }, [colors, speed, complexity]);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      className={`fixed inset-0 pointer-events-none ${className}`}\n      style={{ zIndex: -1 }}\n      {...otherProps}\n    />\n  );\n};\n\nexport default LiquidChrome;",
        "props": {
          "colors": "array - Color palette (default: gradient colors)",
          "speed": "number - Animation speed (default: 0.02)",
          "complexity": "number - Wave complexity (default: 0.5)",
          "className": "string - Additional CSS classes",
          "...otherProps": "object - Additional canvas props"
        },
        "features": [
          "Canvas-based liquid animation",
          "Chrome metallic effects",
          "Multiple color blobs",
          "Screen blend mode",
          "Responsive scaling"
        ]
      }
    }
  },
  "architectural_patterns": {
    "component_structure": {
      "standard_pattern": "const Component = ({ prop1 = defaultValue, prop2, ...otherProps }) => { /* hooks */ return JSX; };",
      "prop_destructuring": "Always destructure props with defaults",
      "rest_props_spreading": "Use ...otherProps for extensibility",
      "ref_forwarding": "UseRef for DOM manipulation and cleanup"
    },
    "animation_integration": {
      "gsap": "Professional scroll-triggered animations with cleanup",
      "threejs": "3D graphics with proper resource disposal",
      "canvas": "Custom particle effects with requestAnimationFrame",
      "css_transforms": "Hardware-accelerated transitions"
    },
    "hook_patterns": {
      "useEffect_cleanup": "Always cleanup event listeners and animations",
      "useRef_dom": "Direct DOM manipulation for performance",
      "useState_reactive": "State for interactive behaviors",
      "custom_hooks": "Reusable logic extraction"
    },
    "styling_approach": {
      "tailwind_first": "Utility-first CSS with Tailwind",
      "responsive_design": "Mobile-first responsive patterns",
      "dark_mode": "Color scheme variants",
      "animation_classes": "Transition and transform utilities"
    }
  },
  "implementation_insights": {
    "performance_optimizations": [
      "Hardware acceleration with transform3d",
      "RequestAnimationFrame for smooth animations",
      "Proper cleanup to prevent memory leaks",
      "Efficient canvas rendering",
      "Debounced resize handlers"
    ],
    "accessibility_features": [
      "ARIA labels for interactive elements",
      "Focus management and outlines",
      "Keyboard navigation support",
      "Screen reader compatibility",
      "Reduced motion preferences"
    ],
    "code_quality": [
      "Consistent prop naming conventions",
      "Comprehensive prop validation",
      "Error boundary integration",
      "TypeScript support ready",
      "ESLint configuration compliance"
    ]
  },
  "dependency_analysis": {
    "core_dependencies": {
      "react": "^18.x - Core React library",
      "gsap": "^3.x - Professional animations",
      "three": "^0.x - 3D graphics library",
      "react-hot-toast": "^2.x - Toast notifications"
    },
    "optional_dependencies": {
      "framer-motion": "Alternative animation library",
      "lottie-react": "Lottie animations",
      "react-spring": "Spring-based animations"
    },
    "dev_dependencies": {
      "tailwindcss": "^3.x - Utility-first CSS",
      "vite": "^4.x - Build tool",
      "@types/three": "TypeScript definitions"
    }
  },
  "usage_examples": {
    "basic_implementation": "import AnimatedContent from './AnimatedContent';\n\nfunction App() {\n  return (\n    <AnimatedContent distance={150} direction=\"horizontal\">\n      <h1>Animated Content</h1>\n    </AnimatedContent>\n  );\n}",
    "advanced_configuration": "import { BlobCursor, ClickSpark, Cubes } from './components';\n\nfunction App() {\n  return (\n    <>\n      <BlobCursor size={60} color=\"#ff6b6b\" blur={10} />\n      <ClickSpark particleCount={12} color=\"#4ecdc4\" />\n      <Cubes count={30} speed={0.005} spread={40} />\n    </>\n  );\n}",
    "component_composition": "import { AnimatedContent, BackToTopButton } from './components';\n\nfunction Layout({ children }) {\n  return (\n    <div>\n      <AnimatedContent>\n        {children}\n      </AnimatedContent>\n      <BackToTopButton showToast={true} />\n    </div>\n  );\n}"
  }
}