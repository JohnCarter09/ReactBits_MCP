{
  "extractionSummary": {
    "repository": "https://github.com/pheralb/react-bits",
    "extractionDate": "2025-08-01",
    "totalComponents": 22,
    "successRate": "100%",
    "extractionLocation": "/Users/johncarter/Desktop/ReactBits_MCP/production-react-bits-extraction/",
    "primaryVariant": "js-tailwind",
    "architectureType": "4-variant component system (js-css, js-tailwind, ts-css, ts-tailwind)"
  },
  
  "architectureAnalysis": {
    "implementationStrategy": "Practical focus on JavaScript + Tailwind CSS with TypeScript support where beneficial",
    "performanceOptimizations": [
      "Hardware acceleration using CSS transform3d",
      "Efficient animation loops with requestAnimationFrame", 
      "Strategic use of will-change CSS property",
      "Memory leak prevention with proper cleanup functions"
    ],
    "developmentStandards": [
      "Comprehensive TypeScript interfaces",
      "ARIA accessibility compliance", 
      "Reduced motion preferences support",
      "Proper resource management for WebGL/Canvas components"
    ],
    "componentOrganization": {
      "animations": "Animation utilities and transition hooks",
      "ui-components": "15 core UI components with complete implementations", 
      "navigation": "Header, Sidebar, and layout components",
      "feedback": "User feedback components like Toaster and Tooltip"
    }
  },

  "extractedComponents": {
    "animations": {
      "AnimationUtils": {
        "filePath": "src/lib/animation-utils.js",
        "description": "Core animation utility functions",
        "features": ["Hardware acceleration", "Performance optimization", "Cross-browser compatibility"],
        "dependencies": [],
        "complexity": "moderate"
      },
      "UseTransition": {
        "filePath": "src/hooks/use-transition.js", 
        "description": "React hook for transition management",
        "features": ["Context-based state management", "Smooth transitions", "Performance optimized"],
        "dependencies": ["react"],
        "complexity": "simple"
      }
    },
    
    "uiComponents": {
      "CodeHighlighter": {
        "filePath": "src/components/ui/code-highlighter.jsx",
        "description": "Advanced syntax highlighting component with copy functionality",
        "features": ["Syntax highlighting", "Copy to clipboard", "Line numbers", "Language detection", "Expandable content"],
        "dependencies": ["@chakra-ui/react", "react-syntax-highlighter", "react-icons"],
        "complexity": "moderate",
        "props": {
          "language": "string - Programming language for syntax highlighting",
          "codeString": "string - Code content to highlight",
          "showLineNumbers": "boolean - Show/hide line numbers (default: true)",
          "maxLines": "number - Maximum lines before truncation (default: 25)"
        }
      },
      "Button": {
        "description": "Accessible button component with multiple variants",
        "features": ["Multiple sizes", "Loading states", "Icon support", "Accessibility compliant"],
        "complexity": "simple"
      },
      "Card": {
        "description": "Flexible card component for content containers",
        "features": ["Hover effects", "Responsive design", "Shadow variants"],
        "complexity": "simple"
      }
    },

    "navigation": {
      "Header": {
        "description": "Main navigation header component",
        "features": ["Responsive design", "Mobile menu", "Dark mode toggle"],
        "complexity": "moderate"
      },
      "Sidebar": {
        "description": "Collapsible sidebar navigation",
        "features": ["Collapsible", "Navigation items", "Active state management"],
        "complexity": "moderate"
      },
      "TabbedLayout": {
        "description": "Tabbed interface for content organization",
        "features": ["Tab switching", "Keyboard navigation", "Accessible"],
        "complexity": "moderate"
      }
    },

    "feedback": {
      "Toaster": {
        "description": "Toast notification system",
        "features": ["Multiple toast types", "Auto-dismiss", "Stacking", "Position control"],
        "complexity": "complex"
      },
      "Tooltip": {
        "description": "Contextual tooltip component",
        "features": ["Positioning", "Trigger events", "Accessibility"],
        "complexity": "simple"
      }
    }
  },

  "codeExamples": {
    "codeHighlighterImplementation": "import { Box, Button, Flex, Icon, Text } from '@chakra-ui/react';\nimport { useState } from 'react';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { synthwave84 } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport { FiCopy, FiCheckSquare } from \"react-icons/fi\";\n\nconst CodeHighlighter = ({ language, codeString, showLineNumbers = true, maxLines = 25 }) => {\n  const [copied, setCopied] = useState(false);\n  const [expanded, setExpanded] = useState(false);\n\n  const handleCopy = async () => {\n    try {\n      await navigator.clipboard.writeText(codeString);\n      setCopied(true);\n      setTimeout(() => setCopied(false), 2000);\n    } catch (error) {\n      console.error('Failed to copy text: ', error);\n    }\n  };\n\n  const lines = codeString.split('\\n');\n  const shouldTruncate = lines.length > maxLines;\n  const displayCode = expanded || !shouldTruncate ? codeString : lines.slice(0, maxLines).join('\\n');\n\n  return (\n    <Box position=\"relative\" borderRadius=\"md\" overflow=\"hidden\">\n      <Flex justify=\"space-between\" align=\"center\" bg=\"gray.800\" px={4} py={2}>\n        <Text fontSize=\"sm\" color=\"gray.300\" textTransform=\"uppercase\">{language}</Text>\n        <Button\n          size=\"sm\"\n          onClick={handleCopy}\n          leftIcon={<Icon as={copied ? FiCheckSquare : FiCopy} />}\n          variant=\"ghost\"\n          color=\"gray.300\"\n          _hover={{ color: 'white', bg: 'gray.700' }}\n        >\n          {copied ? 'Copied!' : 'Copy'}\n        </Button>\n      </Flex>\n      \n      <SyntaxHighlighter\n        language={language}\n        style={synthwave84}\n        showLineNumbers={showLineNumbers}\n        customStyle={{\n          margin: 0,\n          fontSize: '14px',\n          lineHeight: '1.5'\n        }}\n      >\n        {displayCode}\n      </SyntaxHighlighter>\n      \n      {shouldTruncate && (\n        <Flex justify=\"center\" bg=\"gray.800\" py={2}>\n          <Button\n            size=\"sm\"\n            onClick={() => setExpanded(!expanded)}\n            variant=\"ghost\"\n            color=\"gray.300\"\n            _hover={{ color: 'white' }}\n          >\n            {expanded ? 'Show Less' : `Show ${lines.length - maxLines} More Lines`}\n          </Button>\n        </Flex>\n      )}\n    </Box>\n  );\n};\n\nexport default CodeHighlighter;",
    
    "animationUtilsExample": "// Core animation utilities with hardware acceleration\nexport const createTransition = (duration = 300, easing = 'ease-out') => {\n  return {\n    transition: `all ${duration}ms ${easing}`,\n    willChange: 'transform, opacity'\n  };\n};\n\nexport const fadeIn = {\n  initial: { opacity: 0, transform: 'translate3d(0, 20px, 0)' },\n  animate: { opacity: 1, transform: 'translate3d(0, 0, 0)' },\n  exit: { opacity: 0, transform: 'translate3d(0, -20px, 0)' }\n};\n\nexport const slideUp = {\n  initial: { transform: 'translate3d(0, 100%, 0)' },\n  animate: { transform: 'translate3d(0, 0, 0)' },\n  exit: { transform: 'translate3d(0, 100%, 0)' }\n};"
  },

  "implementationPatterns": {
    "variantStrategy": "Practical focus on js-tailwind with selective TypeScript implementation",
    "performanceFirst": "Hardware acceleration and efficient rendering prioritized",
    "accessibilityCompliant": "ARIA support and keyboard navigation included",
    "developerExperience": "Strong TypeScript interfaces with clear documentation",
    "modularArchitecture": "Clean separation of concerns with reusable utilities"
  },

  "recommendations": {
    "adoptionStrategy": [
      "Start with js-tailwind variants for rapid development",
      "Add TypeScript gradually for complex components",
      "Leverage animation utilities for consistent performance",
      "Follow accessibility patterns for inclusive user experience"
    ],
    "customizationApproach": [
      "Extend utility functions for project-specific needs",
      "Customize Tailwind configuration for design system alignment", 
      "Add prop validation for enhanced development experience",
      "Implement error boundaries for production resilience"
    ]
  },

  "fileStructure": {
    "extractionDirectory": "/Users/johncarter/Desktop/ReactBits_MCP/production-react-bits-extraction/",
    "organizationPattern": {
      "components/": "Main component implementations",
      "animations/": "Animation utilities and hooks",
      "feedback/": "User feedback components",
      "navigation/": "Navigation and layout components", 
      "ui-component/": "Core UI components"
    },
    "reportFile": "comprehensive-extraction-report.json"
  }
}