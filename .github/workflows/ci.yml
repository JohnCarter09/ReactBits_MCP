name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

env:
  NODE_VERSION: '18'
  REGISTRY_URL: 'https://registry.npmjs.org'

jobs:
  # ============================================================================
  # Code Quality & Testing
  # ============================================================================
  quality:
    name: Code Quality & Testing
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20, 22]
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          registry-url: ${{ env.REGISTRY_URL }}

      - name: Install dependencies
        run: npm ci --no-optional

      - name: TypeScript type checking
        run: npm run typecheck

      - name: Build project
        run: npm run build

      - name: Run tests
        run: npm test

      - name: Test MCP protocol compliance
        run: |
          node dist/index.js --version || echo "Binary check failed"
          echo '{"jsonrpc": "2.0", "id": 1, "method": "tools/list", "params": {}}' | timeout 10s node dist/index.js || echo "MCP protocol test completed"

      - name: Check bundle size
        run: |
          du -sh dist/
          ls -la dist/

      - name: Upload build artifacts
        if: matrix.node-version == 18 && matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            package.json
            package-lock.json
          retention-days: 7

  # ============================================================================
  # Security Scanning
  # ============================================================================
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --no-optional

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Check for vulnerabilities
        run: |
          npx audit-ci --moderate
          
      - name: Dependency review
        if: github.event_name == 'pull_request'
        uses: actions/dependency-review-action@v4

  # ============================================================================
  # Docker Build & Test
  # ============================================================================
  docker:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: reactbits-mcp-server:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm reactbits-mcp-server:test --version || echo "Docker test completed"
          docker run --rm -d --name mcp-test reactbits-mcp-server:test
          sleep 5
          docker logs mcp-test
          docker stop mcp-test

      - name: Test Docker health check
        run: |
          docker run --rm --name mcp-health-test -d reactbits-mcp-server:test
          sleep 10
          docker exec mcp-health-test sh -c 'echo "Health check test"' || echo "Health check completed"
          docker stop mcp-health-test

  # ============================================================================
  # Release Preparation
  # ============================================================================
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    needs: [quality, security, docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    outputs:
      should-release: ${{ steps.check-release.outputs.should-release }}
      version: ${{ steps.check-release.outputs.version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Check if release needed
        id: check-release
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          LATEST_VERSION=${LATEST_TAG#v}
          
          echo "Current version: $CURRENT_VERSION"
          echo "Latest tag: $LATEST_TAG"
          
          if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
            echo "should-release=true" >> $GITHUB_OUTPUT
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "New version detected: $CURRENT_VERSION"
          else
            echo "should-release=false" >> $GITHUB_OUTPUT
            echo "No version change detected"
          fi

  # ============================================================================
  # NPM Publishing
  # ============================================================================
  npm-publish:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: prepare-release
    if: needs.prepare-release.outputs.should-release == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: ${{ env.REGISTRY_URL }}

      - name: Install dependencies
        run: npm ci --no-optional

      - name: Build for production
        run: npm run build

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ./

      - name: Verify package contents
        run: |
          npm pack --dry-run
          echo "Package contents:"
          tar -tzf $(npm pack 2>/dev/null | tail -1) | head -20

      - name: Publish to NPM
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "Publishing version ${{ needs.prepare-release.outputs.version }}"
          npm publish --access public

      - name: Verify published package
        run: |
          sleep 30  # Wait for NPM to propagate
          npm info reactbits-mcp-server@${{ needs.prepare-release.outputs.version }}

  # ============================================================================
  # Docker Publishing
  # ============================================================================
  docker-publish:
    name: Publish Docker Images
    runs-on: ubuntu-latest
    needs: prepare-release
    if: needs.prepare-release.outputs.should-release == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            reactbits/mcp-server
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}},value=v${{ needs.prepare-release.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=v${{ needs.prepare-release.outputs.version }}
            type=semver,pattern={{major}},value=v${{ needs.prepare-release.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push multi-platform images
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ============================================================================
  # GitHub Release
  # ============================================================================
  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [prepare-release, npm-publish, docker-publish]
    if: needs.prepare-release.outputs.should-release == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --no-optional

      - name: Build for release
        run: npm run build

      - name: Generate changelog
        id: changelog
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LATEST_TAG" ]; then
            CHANGES=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            CHANGES=$(git log ${LATEST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "## What's Changed" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "$CHANGES" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "## Installation" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "\`\`\`bash" >> $GITHUB_OUTPUT
          echo "# Via NPM" >> $GITHUB_OUTPUT
          echo "npm install -g reactbits-mcp-server@${{ needs.prepare-release.outputs.version }}" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "# Via Docker" >> $GITHUB_OUTPUT
          echo "docker pull reactbits/mcp-server:${{ needs.prepare-release.outputs.version }}" >> $GITHUB_OUTPUT
          echo "\`\`\`" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create release assets
        run: |
          mkdir -p release-assets
          
          # Create standalone binary package
          npm pack
          mv *.tgz release-assets/reactbits-mcp-server-${{ needs.prepare-release.outputs.version }}.tgz
          
          # Create installation script
          cat > release-assets/install.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "Installing ReactBits MCP Server..."
          
          if command -v npm >/dev/null 2>&1; then
            npm install -g reactbits-mcp-server@${{ needs.prepare-release.outputs.version }}
            echo "✅ Installed via NPM"
          elif command -v docker >/dev/null 2>&1; then
            docker pull reactbits/mcp-server:${{ needs.prepare-release.outputs.version }}
            echo "✅ Docker image pulled"
          else
            echo "❌ Neither NPM nor Docker found. Please install one of them first."
            exit 1
          fi
          
          echo "🎉 ReactBits MCP Server installation complete!"
          EOF
          
          chmod +x release-assets/install.sh

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.prepare-release.outputs.version }}
          name: ReactBits MCP Server v${{ needs.prepare-release.outputs.version }}
          body: ${{ steps.changelog.outputs.CHANGELOG }}
          files: |
            release-assets/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ============================================================================
  # Deployment Notification
  # ============================================================================
  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [github-release]
    if: always() && needs.prepare-release.outputs.should-release == 'true'
    
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.github-release.result }}" == "success" ]; then
            echo "🎉 Deployment successful!"
            echo "Version: ${{ needs.prepare-release.outputs.version }}"
            echo "NPM: https://www.npmjs.com/package/reactbits-mcp-server"
            echo "Docker: https://hub.docker.com/r/reactbits/mcp-server"
          else
            echo "❌ Deployment failed!"
            exit 1
          fi